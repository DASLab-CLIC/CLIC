/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "notify-service_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace clic {

int _kStageStatusValues[] = {
  StageStatus::PENDING,
  StageStatus::RUNNING,
  StageStatus::COMPLETED,
  StageStatus::FAILURE
};
const char* _kStageStatusNames[] = {
  "PENDING",
  "RUNNING",
  "COMPLETED",
  "FAILURE"
};
const std::map<int, const char*> _StageStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kStageStatusValues, _kStageStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const StageStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _StageStatus_VALUES_TO_NAMES.find(val);
  if (it != _StageStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const StageStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _StageStatus_VALUES_TO_NAMES.find(val);
  if (it != _StageStatus_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


StageSnapshot::~StageSnapshot() noexcept {
}


void StageSnapshot::__set_status(const StageStatus::type val) {
  this->status = val;
}

void StageSnapshot::__set_message(const std::string& val) {
  this->message = val;
}

void StageSnapshot::__set_others(const std::map<std::string, std::string> & val) {
  this->others = val;
}
std::ostream& operator<<(std::ostream& out, const StageSnapshot& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StageSnapshot::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->status = (StageStatus::type)ecast0;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->others.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _ktype2;
            ::apache::thrift::protocol::TType _vtype3;
            xfer += iprot->readMapBegin(_ktype2, _vtype3, _size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              std::string _key6;
              xfer += iprot->readString(_key6);
              std::string& _val7 = this->others[_key6];
              xfer += iprot->readString(_val7);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.others = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StageSnapshot::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StageSnapshot");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("others", ::apache::thrift::protocol::T_MAP, 16);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->others.size()));
    std::map<std::string, std::string> ::const_iterator _iter8;
    for (_iter8 = this->others.begin(); _iter8 != this->others.end(); ++_iter8)
    {
      xfer += oprot->writeString(_iter8->first);
      xfer += oprot->writeString(_iter8->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StageSnapshot &a, StageSnapshot &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.message, b.message);
  swap(a.others, b.others);
  swap(a.__isset, b.__isset);
}

StageSnapshot::StageSnapshot(const StageSnapshot& other9) {
  status = other9.status;
  message = other9.message;
  others = other9.others;
  __isset = other9.__isset;
}
StageSnapshot& StageSnapshot::operator=(const StageSnapshot& other10) {
  status = other10.status;
  message = other10.message;
  others = other10.others;
  __isset = other10.__isset;
  return *this;
}
void StageSnapshot::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StageSnapshot(";
  out << "status=" << to_string(status);
  out << ", " << "message=" << to_string(message);
  out << ", " << "others=" << to_string(others);
  out << ")";
}

} // namespace
