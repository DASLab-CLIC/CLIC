/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef notify_service_TYPES_H
#define notify_service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace clic {

struct StageStatus {
  enum type {
    PENDING = 0,
    RUNNING = 1,
    COMPLETED = 2,
    FAILURE = 3
  };
};

extern const std::map<int, const char*> _StageStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const StageStatus::type& val);

std::string to_string(const StageStatus::type& val);

class StageSnapshot;

typedef struct _StageSnapshot__isset {
  _StageSnapshot__isset() : status(false), message(true), others(true) {}
  bool status :1;
  bool message :1;
  bool others :1;
} _StageSnapshot__isset;

class StageSnapshot : public virtual ::apache::thrift::TBase {
 public:

  StageSnapshot(const StageSnapshot&);
  StageSnapshot& operator=(const StageSnapshot&);
  StageSnapshot() : status((StageStatus::type)0), message("") {

  }

  virtual ~StageSnapshot() noexcept;
  StageStatus::type status;
  std::string message;
  std::map<std::string, std::string>  others;

  _StageSnapshot__isset __isset;

  void __set_status(const StageStatus::type val);

  void __set_message(const std::string& val);

  void __set_others(const std::map<std::string, std::string> & val);

  bool operator == (const StageSnapshot & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(others == rhs.others))
      return false;
    return true;
  }
  bool operator != (const StageSnapshot &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StageSnapshot & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StageSnapshot &a, StageSnapshot &b);

std::ostream& operator<<(std::ostream& out, const StageSnapshot& obj);

} // namespace

#endif
