#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from thriftGen.master import TaskService
from thriftGen.master.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void submitPlan(string planName, string planDagPath)')
    print('   listAllTask()')
    print('   getTaskInfo(string planName)')
    print('   getStageInfo(string stageId)')
    print('   getStageIdOfTask(string planName)')
    print('  bool suspendStage(string stageId)')
    print('  bool continueStage(string stageId)')
    print('  string getStageResult(string stageId)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = TaskService.Client(protocol)
transport.open()

if cmd == 'submitPlan':
    if len(args) != 2:
        print('submitPlan requires 2 args')
        sys.exit(1)
    pp.pprint(client.submitPlan(args[0], args[1],))

elif cmd == 'listAllTask':
    if len(args) != 0:
        print('listAllTask requires 0 args')
        sys.exit(1)
    pp.pprint(client.listAllTask())

elif cmd == 'getTaskInfo':
    if len(args) != 1:
        print('getTaskInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.getTaskInfo(args[0],))

elif cmd == 'getStageInfo':
    if len(args) != 1:
        print('getStageInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.getStageInfo(args[0],))

elif cmd == 'getStageIdOfTask':
    if len(args) != 1:
        print('getStageIdOfTask requires 1 args')
        sys.exit(1)
    pp.pprint(client.getStageIdOfTask(args[0],))

elif cmd == 'suspendStage':
    if len(args) != 1:
        print('suspendStage requires 1 args')
        sys.exit(1)
    pp.pprint(client.suspendStage(args[0],))

elif cmd == 'continueStage':
    if len(args) != 1:
        print('continueStage requires 1 args')
        sys.exit(1)
    pp.pprint(client.continueStage(args[0],))

elif cmd == 'getStageResult':
    if len(args) != 1:
        print('getStageResult requires 1 args')
        sys.exit(1)
    pp.pprint(client.getStageResult(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
