/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package fdu.daslab.thrift.base;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-05-26")
public class Operator implements org.apache.thrift.TBase<Operator, Operator._Fields>, java.io.Serializable, Cloneable, Comparable<Operator> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Operator");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField POSSIBLE_PLATFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("possiblePlatforms", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField OPERATOR_STRUCTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorStructure", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OPERATOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMPUTE_COMPLEX_FIELD_DESC = new org.apache.thrift.protocol.TField("computeComplex", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OperatorStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OperatorTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> possiblePlatforms; // required
  /**
   * 
   * @see OperatorStructure
   */
  public @org.apache.thrift.annotation.Nullable OperatorStructure operatorStructure; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String operatorType; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String computeComplex; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> params; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    POSSIBLE_PLATFORMS((short)2, "possiblePlatforms"),
    /**
     * 
     * @see OperatorStructure
     */
    OPERATOR_STRUCTURE((short)4, "operatorStructure"),
    OPERATOR_TYPE((short)5, "operatorType"),
    COMPUTE_COMPLEX((short)6, "computeComplex"),
    PARAMS((short)16, "params");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // POSSIBLE_PLATFORMS
          return POSSIBLE_PLATFORMS;
        case 4: // OPERATOR_STRUCTURE
          return OPERATOR_STRUCTURE;
        case 5: // OPERATOR_TYPE
          return OPERATOR_TYPE;
        case 6: // COMPUTE_COMPLEX
          return COMPUTE_COMPLEX;
        case 16: // PARAMS
          return PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSSIBLE_PLATFORMS, new org.apache.thrift.meta_data.FieldMetaData("possiblePlatforms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OPERATOR_STRUCTURE, new org.apache.thrift.meta_data.FieldMetaData("operatorStructure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OperatorStructure.class)));
    tmpMap.put(_Fields.OPERATOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operatorType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPUTE_COMPLEX, new org.apache.thrift.meta_data.FieldMetaData("computeComplex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Operator.class, metaDataMap);
  }

  public Operator() {
  }

  public Operator(
    java.lang.String name,
    java.util.List<java.lang.String> possiblePlatforms,
    OperatorStructure operatorStructure,
    java.lang.String operatorType,
    java.lang.String computeComplex,
    java.util.Map<java.lang.String,java.lang.String> params)
  {
    this();
    this.name = name;
    this.possiblePlatforms = possiblePlatforms;
    this.operatorStructure = operatorStructure;
    this.operatorType = operatorType;
    this.computeComplex = computeComplex;
    this.params = params;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Operator(Operator other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPossiblePlatforms()) {
      java.util.List<java.lang.String> __this__possiblePlatforms = new java.util.ArrayList<java.lang.String>(other.possiblePlatforms);
      this.possiblePlatforms = __this__possiblePlatforms;
    }
    if (other.isSetOperatorStructure()) {
      this.operatorStructure = other.operatorStructure;
    }
    if (other.isSetOperatorType()) {
      this.operatorType = other.operatorType;
    }
    if (other.isSetComputeComplex()) {
      this.computeComplex = other.computeComplex;
    }
    if (other.isSetParams()) {
      java.util.Map<java.lang.String,java.lang.String> __this__params = new java.util.HashMap<java.lang.String,java.lang.String>(other.params);
      this.params = __this__params;
    }
  }

  public Operator deepCopy() {
    return new Operator(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.possiblePlatforms = null;
    this.operatorStructure = null;
    this.operatorType = null;
    this.computeComplex = null;
    this.params = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public Operator setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getPossiblePlatformsSize() {
    return (this.possiblePlatforms == null) ? 0 : this.possiblePlatforms.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getPossiblePlatformsIterator() {
    return (this.possiblePlatforms == null) ? null : this.possiblePlatforms.iterator();
  }

  public void addToPossiblePlatforms(java.lang.String elem) {
    if (this.possiblePlatforms == null) {
      this.possiblePlatforms = new java.util.ArrayList<java.lang.String>();
    }
    this.possiblePlatforms.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getPossiblePlatforms() {
    return this.possiblePlatforms;
  }

  public Operator setPossiblePlatforms(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> possiblePlatforms) {
    this.possiblePlatforms = possiblePlatforms;
    return this;
  }

  public void unsetPossiblePlatforms() {
    this.possiblePlatforms = null;
  }

  /** Returns true if field possiblePlatforms is set (has been assigned a value) and false otherwise */
  public boolean isSetPossiblePlatforms() {
    return this.possiblePlatforms != null;
  }

  public void setPossiblePlatformsIsSet(boolean value) {
    if (!value) {
      this.possiblePlatforms = null;
    }
  }

  /**
   * 
   * @see OperatorStructure
   */
  @org.apache.thrift.annotation.Nullable
  public OperatorStructure getOperatorStructure() {
    return this.operatorStructure;
  }

  /**
   * 
   * @see OperatorStructure
   */
  public Operator setOperatorStructure(@org.apache.thrift.annotation.Nullable OperatorStructure operatorStructure) {
    this.operatorStructure = operatorStructure;
    return this;
  }

  public void unsetOperatorStructure() {
    this.operatorStructure = null;
  }

  /** Returns true if field operatorStructure is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorStructure() {
    return this.operatorStructure != null;
  }

  public void setOperatorStructureIsSet(boolean value) {
    if (!value) {
      this.operatorStructure = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOperatorType() {
    return this.operatorType;
  }

  public Operator setOperatorType(@org.apache.thrift.annotation.Nullable java.lang.String operatorType) {
    this.operatorType = operatorType;
    return this;
  }

  public void unsetOperatorType() {
    this.operatorType = null;
  }

  /** Returns true if field operatorType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorType() {
    return this.operatorType != null;
  }

  public void setOperatorTypeIsSet(boolean value) {
    if (!value) {
      this.operatorType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getComputeComplex() {
    return this.computeComplex;
  }

  public Operator setComputeComplex(@org.apache.thrift.annotation.Nullable java.lang.String computeComplex) {
    this.computeComplex = computeComplex;
    return this;
  }

  public void unsetComputeComplex() {
    this.computeComplex = null;
  }

  /** Returns true if field computeComplex is set (has been assigned a value) and false otherwise */
  public boolean isSetComputeComplex() {
    return this.computeComplex != null;
  }

  public void setComputeComplexIsSet(boolean value) {
    if (!value) {
      this.computeComplex = null;
    }
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public void putToParams(java.lang.String key, java.lang.String val) {
    if (this.params == null) {
      this.params = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.params.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getParams() {
    return this.params;
  }

  public Operator setParams(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case POSSIBLE_PLATFORMS:
      if (value == null) {
        unsetPossiblePlatforms();
      } else {
        setPossiblePlatforms((java.util.List<java.lang.String>)value);
      }
      break;

    case OPERATOR_STRUCTURE:
      if (value == null) {
        unsetOperatorStructure();
      } else {
        setOperatorStructure((OperatorStructure)value);
      }
      break;

    case OPERATOR_TYPE:
      if (value == null) {
        unsetOperatorType();
      } else {
        setOperatorType((java.lang.String)value);
      }
      break;

    case COMPUTE_COMPLEX:
      if (value == null) {
        unsetComputeComplex();
      } else {
        setComputeComplex((java.lang.String)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case POSSIBLE_PLATFORMS:
      return getPossiblePlatforms();

    case OPERATOR_STRUCTURE:
      return getOperatorStructure();

    case OPERATOR_TYPE:
      return getOperatorType();

    case COMPUTE_COMPLEX:
      return getComputeComplex();

    case PARAMS:
      return getParams();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case POSSIBLE_PLATFORMS:
      return isSetPossiblePlatforms();
    case OPERATOR_STRUCTURE:
      return isSetOperatorStructure();
    case OPERATOR_TYPE:
      return isSetOperatorType();
    case COMPUTE_COMPLEX:
      return isSetComputeComplex();
    case PARAMS:
      return isSetParams();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Operator)
      return this.equals((Operator)that);
    return false;
  }

  public boolean equals(Operator that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_possiblePlatforms = true && this.isSetPossiblePlatforms();
    boolean that_present_possiblePlatforms = true && that.isSetPossiblePlatforms();
    if (this_present_possiblePlatforms || that_present_possiblePlatforms) {
      if (!(this_present_possiblePlatforms && that_present_possiblePlatforms))
        return false;
      if (!this.possiblePlatforms.equals(that.possiblePlatforms))
        return false;
    }

    boolean this_present_operatorStructure = true && this.isSetOperatorStructure();
    boolean that_present_operatorStructure = true && that.isSetOperatorStructure();
    if (this_present_operatorStructure || that_present_operatorStructure) {
      if (!(this_present_operatorStructure && that_present_operatorStructure))
        return false;
      if (!this.operatorStructure.equals(that.operatorStructure))
        return false;
    }

    boolean this_present_operatorType = true && this.isSetOperatorType();
    boolean that_present_operatorType = true && that.isSetOperatorType();
    if (this_present_operatorType || that_present_operatorType) {
      if (!(this_present_operatorType && that_present_operatorType))
        return false;
      if (!this.operatorType.equals(that.operatorType))
        return false;
    }

    boolean this_present_computeComplex = true && this.isSetComputeComplex();
    boolean that_present_computeComplex = true && that.isSetComputeComplex();
    if (this_present_computeComplex || that_present_computeComplex) {
      if (!(this_present_computeComplex && that_present_computeComplex))
        return false;
      if (!this.computeComplex.equals(that.computeComplex))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPossiblePlatforms()) ? 131071 : 524287);
    if (isSetPossiblePlatforms())
      hashCode = hashCode * 8191 + possiblePlatforms.hashCode();

    hashCode = hashCode * 8191 + ((isSetOperatorStructure()) ? 131071 : 524287);
    if (isSetOperatorStructure())
      hashCode = hashCode * 8191 + operatorStructure.getValue();

    hashCode = hashCode * 8191 + ((isSetOperatorType()) ? 131071 : 524287);
    if (isSetOperatorType())
      hashCode = hashCode * 8191 + operatorType.hashCode();

    hashCode = hashCode * 8191 + ((isSetComputeComplex()) ? 131071 : 524287);
    if (isSetComputeComplex())
      hashCode = hashCode * 8191 + computeComplex.hashCode();

    hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
    if (isSetParams())
      hashCode = hashCode * 8191 + params.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Operator other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPossiblePlatforms()).compareTo(other.isSetPossiblePlatforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPossiblePlatforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.possiblePlatforms, other.possiblePlatforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOperatorStructure()).compareTo(other.isSetOperatorStructure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorStructure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorStructure, other.operatorStructure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOperatorType()).compareTo(other.isSetOperatorType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorType, other.operatorType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComputeComplex()).compareTo(other.isSetComputeComplex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComputeComplex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeComplex, other.computeComplex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Operator(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("possiblePlatforms:");
    if (this.possiblePlatforms == null) {
      sb.append("null");
    } else {
      sb.append(this.possiblePlatforms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorStructure:");
    if (this.operatorStructure == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorStructure);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorType:");
    if (this.operatorType == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("computeComplex:");
    if (this.computeComplex == null) {
      sb.append("null");
    } else {
      sb.append(this.computeComplex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("params:");
    if (this.params == null) {
      sb.append("null");
    } else {
      sb.append(this.params);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OperatorStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OperatorStandardScheme getScheme() {
      return new OperatorStandardScheme();
    }
  }

  private static class OperatorStandardScheme extends org.apache.thrift.scheme.StandardScheme<Operator> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Operator struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSSIBLE_PLATFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.possiblePlatforms = new java.util.ArrayList<java.lang.String>(_list10.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = iprot.readString();
                  struct.possiblePlatforms.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setPossiblePlatformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPERATOR_STRUCTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operatorStructure = fdu.daslab.thrift.base.OperatorStructure.findByValue(iprot.readI32());
              struct.setOperatorStructureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPERATOR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorType = iprot.readString();
              struct.setOperatorTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMPUTE_COMPLEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.computeComplex = iprot.readString();
              struct.setComputeComplexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map13.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key14;
                @org.apache.thrift.annotation.Nullable java.lang.String _val15;
                for (int _i16 = 0; _i16 < _map13.size; ++_i16)
                {
                  _key14 = iprot.readString();
                  _val15 = iprot.readString();
                  struct.params.put(_key14, _val15);
                }
                iprot.readMapEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Operator struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.possiblePlatforms != null) {
        oprot.writeFieldBegin(POSSIBLE_PLATFORMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.possiblePlatforms.size()));
          for (java.lang.String _iter17 : struct.possiblePlatforms)
          {
            oprot.writeString(_iter17);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.operatorStructure != null) {
        oprot.writeFieldBegin(OPERATOR_STRUCTURE_FIELD_DESC);
        oprot.writeI32(struct.operatorStructure.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.operatorType != null) {
        oprot.writeFieldBegin(OPERATOR_TYPE_FIELD_DESC);
        oprot.writeString(struct.operatorType);
        oprot.writeFieldEnd();
      }
      if (struct.computeComplex != null) {
        oprot.writeFieldBegin(COMPUTE_COMPLEX_FIELD_DESC);
        oprot.writeString(struct.computeComplex);
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        oprot.writeFieldBegin(PARAMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter18 : struct.params.entrySet())
          {
            oprot.writeString(_iter18.getKey());
            oprot.writeString(_iter18.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OperatorTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OperatorTupleScheme getScheme() {
      return new OperatorTupleScheme();
    }
  }

  private static class OperatorTupleScheme extends org.apache.thrift.scheme.TupleScheme<Operator> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Operator struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetPossiblePlatforms()) {
        optionals.set(1);
      }
      if (struct.isSetOperatorStructure()) {
        optionals.set(2);
      }
      if (struct.isSetOperatorType()) {
        optionals.set(3);
      }
      if (struct.isSetComputeComplex()) {
        optionals.set(4);
      }
      if (struct.isSetParams()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetPossiblePlatforms()) {
        {
          oprot.writeI32(struct.possiblePlatforms.size());
          for (java.lang.String _iter19 : struct.possiblePlatforms)
          {
            oprot.writeString(_iter19);
          }
        }
      }
      if (struct.isSetOperatorStructure()) {
        oprot.writeI32(struct.operatorStructure.getValue());
      }
      if (struct.isSetOperatorType()) {
        oprot.writeString(struct.operatorType);
      }
      if (struct.isSetComputeComplex()) {
        oprot.writeString(struct.computeComplex);
      }
      if (struct.isSetParams()) {
        {
          oprot.writeI32(struct.params.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter20 : struct.params.entrySet())
          {
            oprot.writeString(_iter20.getKey());
            oprot.writeString(_iter20.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Operator struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.possiblePlatforms = new java.util.ArrayList<java.lang.String>(_list21.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.possiblePlatforms.add(_elem22);
          }
        }
        struct.setPossiblePlatformsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.operatorStructure = fdu.daslab.thrift.base.OperatorStructure.findByValue(iprot.readI32());
        struct.setOperatorStructureIsSet(true);
      }
      if (incoming.get(3)) {
        struct.operatorType = iprot.readString();
        struct.setOperatorTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.computeComplex = iprot.readString();
        struct.setComputeComplexIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map24.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key25;
          @org.apache.thrift.annotation.Nullable java.lang.String _val26;
          for (int _i27 = 0; _i27 < _map24.size; ++_i27)
          {
            _key25 = iprot.readString();
            _val26 = iprot.readString();
            struct.params.put(_key25, _val26);
          }
        }
        struct.setParamsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

