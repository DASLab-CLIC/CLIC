/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package fdu.daslab.thrift.base;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-05-20")
public class PhysicalPlan implements org.apache.thrift.TBase<PhysicalPlan, PhysicalPlan._Fields>, java.io.Serializable, Cloneable, Comparable<PhysicalPlan> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PhysicalPlan");

  private static final org.apache.thrift.protocol.TField SUBPLANS_FIELD_DESC = new org.apache.thrift.protocol.TField("subplans", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_STAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceStages", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PhysicalPlanStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PhysicalPlanTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,Stage> subplans; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> sourceStages; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> params; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUBPLANS((short)1, "subplans"),
    SOURCE_STAGES((short)2, "sourceStages"),
    PARAMS((short)16, "params");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBPLANS
          return SUBPLANS;
        case 2: // SOURCE_STAGES
          return SOURCE_STAGES;
        case 16: // PARAMS
          return PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBPLANS, new org.apache.thrift.meta_data.FieldMetaData("subplans", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Stage.class))));
    tmpMap.put(_Fields.SOURCE_STAGES, new org.apache.thrift.meta_data.FieldMetaData("sourceStages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PhysicalPlan.class, metaDataMap);
  }

  public PhysicalPlan() {
  }

  public PhysicalPlan(
    java.util.Map<java.lang.Integer,Stage> subplans,
    java.util.List<java.lang.Integer> sourceStages,
    java.util.Map<java.lang.String,java.lang.String> params)
  {
    this();
    this.subplans = subplans;
    this.sourceStages = sourceStages;
    this.params = params;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PhysicalPlan(PhysicalPlan other) {
    if (other.isSetSubplans()) {
      java.util.Map<java.lang.Integer,Stage> __this__subplans = new java.util.HashMap<java.lang.Integer,Stage>(other.subplans.size());
      for (java.util.Map.Entry<java.lang.Integer, Stage> other_element : other.subplans.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        Stage other_element_value = other_element.getValue();

        java.lang.Integer __this__subplans_copy_key = other_element_key;

        Stage __this__subplans_copy_value = new Stage(other_element_value);

        __this__subplans.put(__this__subplans_copy_key, __this__subplans_copy_value);
      }
      this.subplans = __this__subplans;
    }
    if (other.isSetSourceStages()) {
      java.util.List<java.lang.Integer> __this__sourceStages = new java.util.ArrayList<java.lang.Integer>(other.sourceStages);
      this.sourceStages = __this__sourceStages;
    }
    if (other.isSetParams()) {
      java.util.Map<java.lang.String,java.lang.String> __this__params = new java.util.HashMap<java.lang.String,java.lang.String>(other.params);
      this.params = __this__params;
    }
  }

  public PhysicalPlan deepCopy() {
    return new PhysicalPlan(this);
  }

  @Override
  public void clear() {
    this.subplans = null;
    this.sourceStages = null;
    this.params = null;
  }

  public int getSubplansSize() {
    return (this.subplans == null) ? 0 : this.subplans.size();
  }

  public void putToSubplans(int key, Stage val) {
    if (this.subplans == null) {
      this.subplans = new java.util.HashMap<java.lang.Integer,Stage>();
    }
    this.subplans.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,Stage> getSubplans() {
    return this.subplans;
  }

  public PhysicalPlan setSubplans(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,Stage> subplans) {
    this.subplans = subplans;
    return this;
  }

  public void unsetSubplans() {
    this.subplans = null;
  }

  /** Returns true if field subplans is set (has been assigned a value) and false otherwise */
  public boolean isSetSubplans() {
    return this.subplans != null;
  }

  public void setSubplansIsSet(boolean value) {
    if (!value) {
      this.subplans = null;
    }
  }

  public int getSourceStagesSize() {
    return (this.sourceStages == null) ? 0 : this.sourceStages.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getSourceStagesIterator() {
    return (this.sourceStages == null) ? null : this.sourceStages.iterator();
  }

  public void addToSourceStages(int elem) {
    if (this.sourceStages == null) {
      this.sourceStages = new java.util.ArrayList<java.lang.Integer>();
    }
    this.sourceStages.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getSourceStages() {
    return this.sourceStages;
  }

  public PhysicalPlan setSourceStages(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> sourceStages) {
    this.sourceStages = sourceStages;
    return this;
  }

  public void unsetSourceStages() {
    this.sourceStages = null;
  }

  /** Returns true if field sourceStages is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceStages() {
    return this.sourceStages != null;
  }

  public void setSourceStagesIsSet(boolean value) {
    if (!value) {
      this.sourceStages = null;
    }
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public void putToParams(java.lang.String key, java.lang.String val) {
    if (this.params == null) {
      this.params = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.params.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getParams() {
    return this.params;
  }

  public PhysicalPlan setParams(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SUBPLANS:
      if (value == null) {
        unsetSubplans();
      } else {
        setSubplans((java.util.Map<java.lang.Integer,Stage>)value);
      }
      break;

    case SOURCE_STAGES:
      if (value == null) {
        unsetSourceStages();
      } else {
        setSourceStages((java.util.List<java.lang.Integer>)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBPLANS:
      return getSubplans();

    case SOURCE_STAGES:
      return getSourceStages();

    case PARAMS:
      return getParams();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SUBPLANS:
      return isSetSubplans();
    case SOURCE_STAGES:
      return isSetSourceStages();
    case PARAMS:
      return isSetParams();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PhysicalPlan)
      return this.equals((PhysicalPlan)that);
    return false;
  }

  public boolean equals(PhysicalPlan that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_subplans = true && this.isSetSubplans();
    boolean that_present_subplans = true && that.isSetSubplans();
    if (this_present_subplans || that_present_subplans) {
      if (!(this_present_subplans && that_present_subplans))
        return false;
      if (!this.subplans.equals(that.subplans))
        return false;
    }

    boolean this_present_sourceStages = true && this.isSetSourceStages();
    boolean that_present_sourceStages = true && that.isSetSourceStages();
    if (this_present_sourceStages || that_present_sourceStages) {
      if (!(this_present_sourceStages && that_present_sourceStages))
        return false;
      if (!this.sourceStages.equals(that.sourceStages))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSubplans()) ? 131071 : 524287);
    if (isSetSubplans())
      hashCode = hashCode * 8191 + subplans.hashCode();

    hashCode = hashCode * 8191 + ((isSetSourceStages()) ? 131071 : 524287);
    if (isSetSourceStages())
      hashCode = hashCode * 8191 + sourceStages.hashCode();

    hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
    if (isSetParams())
      hashCode = hashCode * 8191 + params.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PhysicalPlan other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSubplans()).compareTo(other.isSetSubplans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubplans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subplans, other.subplans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSourceStages()).compareTo(other.isSetSourceStages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceStages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceStages, other.sourceStages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PhysicalPlan(");
    boolean first = true;

    sb.append("subplans:");
    if (this.subplans == null) {
      sb.append("null");
    } else {
      sb.append(this.subplans);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceStages:");
    if (this.sourceStages == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceStages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("params:");
    if (this.params == null) {
      sb.append("null");
    } else {
      sb.append(this.params);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PhysicalPlanStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PhysicalPlanStandardScheme getScheme() {
      return new PhysicalPlanStandardScheme();
    }
  }

  private static class PhysicalPlanStandardScheme extends org.apache.thrift.scheme.StandardScheme<PhysicalPlan> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PhysicalPlan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUBPLANS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map108 = iprot.readMapBegin();
                struct.subplans = new java.util.HashMap<java.lang.Integer,Stage>(2*_map108.size);
                int _key109;
                @org.apache.thrift.annotation.Nullable Stage _val110;
                for (int _i111 = 0; _i111 < _map108.size; ++_i111)
                {
                  _key109 = iprot.readI32();
                  _val110 = new Stage();
                  _val110.read(iprot);
                  struct.subplans.put(_key109, _val110);
                }
                iprot.readMapEnd();
              }
              struct.setSubplansIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE_STAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.sourceStages = new java.util.ArrayList<java.lang.Integer>(_list112.size);
                int _elem113;
                for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                {
                  _elem113 = iprot.readI32();
                  struct.sourceStages.add(_elem113);
                }
                iprot.readListEnd();
              }
              struct.setSourceStagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map115 = iprot.readMapBegin();
                struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map115.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key116;
                @org.apache.thrift.annotation.Nullable java.lang.String _val117;
                for (int _i118 = 0; _i118 < _map115.size; ++_i118)
                {
                  _key116 = iprot.readString();
                  _val117 = iprot.readString();
                  struct.params.put(_key116, _val117);
                }
                iprot.readMapEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PhysicalPlan struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subplans != null) {
        oprot.writeFieldBegin(SUBPLANS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.subplans.size()));
          for (java.util.Map.Entry<java.lang.Integer, Stage> _iter119 : struct.subplans.entrySet())
          {
            oprot.writeI32(_iter119.getKey());
            _iter119.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sourceStages != null) {
        oprot.writeFieldBegin(SOURCE_STAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sourceStages.size()));
          for (int _iter120 : struct.sourceStages)
          {
            oprot.writeI32(_iter120);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        oprot.writeFieldBegin(PARAMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter121 : struct.params.entrySet())
          {
            oprot.writeString(_iter121.getKey());
            oprot.writeString(_iter121.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PhysicalPlanTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PhysicalPlanTupleScheme getScheme() {
      return new PhysicalPlanTupleScheme();
    }
  }

  private static class PhysicalPlanTupleScheme extends org.apache.thrift.scheme.TupleScheme<PhysicalPlan> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PhysicalPlan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSubplans()) {
        optionals.set(0);
      }
      if (struct.isSetSourceStages()) {
        optionals.set(1);
      }
      if (struct.isSetParams()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSubplans()) {
        {
          oprot.writeI32(struct.subplans.size());
          for (java.util.Map.Entry<java.lang.Integer, Stage> _iter122 : struct.subplans.entrySet())
          {
            oprot.writeI32(_iter122.getKey());
            _iter122.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetSourceStages()) {
        {
          oprot.writeI32(struct.sourceStages.size());
          for (int _iter123 : struct.sourceStages)
          {
            oprot.writeI32(_iter123);
          }
        }
      }
      if (struct.isSetParams()) {
        {
          oprot.writeI32(struct.params.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter124 : struct.params.entrySet())
          {
            oprot.writeString(_iter124.getKey());
            oprot.writeString(_iter124.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PhysicalPlan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map125 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.subplans = new java.util.HashMap<java.lang.Integer,Stage>(2*_map125.size);
          int _key126;
          @org.apache.thrift.annotation.Nullable Stage _val127;
          for (int _i128 = 0; _i128 < _map125.size; ++_i128)
          {
            _key126 = iprot.readI32();
            _val127 = new Stage();
            _val127.read(iprot);
            struct.subplans.put(_key126, _val127);
          }
        }
        struct.setSubplansIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list129 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.sourceStages = new java.util.ArrayList<java.lang.Integer>(_list129.size);
          int _elem130;
          for (int _i131 = 0; _i131 < _list129.size; ++_i131)
          {
            _elem130 = iprot.readI32();
            struct.sourceStages.add(_elem130);
          }
        }
        struct.setSourceStagesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map132 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map132.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key133;
          @org.apache.thrift.annotation.Nullable java.lang.String _val134;
          for (int _i135 = 0; _i135 < _map132.size; ++_i135)
          {
            _key133 = iprot.readString();
            _val134 = iprot.readString();
            struct.params.put(_key133, _val134);
          }
        }
        struct.setParamsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

