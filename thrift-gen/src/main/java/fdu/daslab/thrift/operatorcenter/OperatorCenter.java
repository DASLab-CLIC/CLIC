/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package fdu.daslab.thrift.operatorcenter;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-06-15")
public class OperatorCenter {

  public interface Iface {

    public void addPlatform(fdu.daslab.thrift.base.Platform platform) throws org.apache.thrift.TException;

    public fdu.daslab.thrift.base.Platform findPlatformInfo(java.lang.String platformName) throws org.apache.thrift.TException;

    public java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> listPlatforms() throws org.apache.thrift.TException;

    public void addOperator(fdu.daslab.thrift.base.Operator operator) throws org.apache.thrift.TException;

    public fdu.daslab.thrift.base.Operator findOperatorInfo(java.lang.String operatorName, java.lang.String platformName) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addPlatform(fdu.daslab.thrift.base.Platform platform, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void findPlatformInfo(java.lang.String platformName, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Platform> resultHandler) throws org.apache.thrift.TException;

    public void listPlatforms(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform>> resultHandler) throws org.apache.thrift.TException;

    public void addOperator(fdu.daslab.thrift.base.Operator operator, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void findOperatorInfo(java.lang.String operatorName, java.lang.String platformName, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Operator> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addPlatform(fdu.daslab.thrift.base.Platform platform) throws org.apache.thrift.TException
    {
      send_addPlatform(platform);
      recv_addPlatform();
    }

    public void send_addPlatform(fdu.daslab.thrift.base.Platform platform) throws org.apache.thrift.TException
    {
      addPlatform_args args = new addPlatform_args();
      args.setPlatform(platform);
      sendBase("addPlatform", args);
    }

    public void recv_addPlatform() throws org.apache.thrift.TException
    {
      addPlatform_result result = new addPlatform_result();
      receiveBase(result, "addPlatform");
      return;
    }

    public fdu.daslab.thrift.base.Platform findPlatformInfo(java.lang.String platformName) throws org.apache.thrift.TException
    {
      send_findPlatformInfo(platformName);
      return recv_findPlatformInfo();
    }

    public void send_findPlatformInfo(java.lang.String platformName) throws org.apache.thrift.TException
    {
      findPlatformInfo_args args = new findPlatformInfo_args();
      args.setPlatformName(platformName);
      sendBase("findPlatformInfo", args);
    }

    public fdu.daslab.thrift.base.Platform recv_findPlatformInfo() throws org.apache.thrift.TException
    {
      findPlatformInfo_result result = new findPlatformInfo_result();
      receiveBase(result, "findPlatformInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPlatformInfo failed: unknown result");
    }

    public java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> listPlatforms() throws org.apache.thrift.TException
    {
      send_listPlatforms();
      return recv_listPlatforms();
    }

    public void send_listPlatforms() throws org.apache.thrift.TException
    {
      listPlatforms_args args = new listPlatforms_args();
      sendBase("listPlatforms", args);
    }

    public java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> recv_listPlatforms() throws org.apache.thrift.TException
    {
      listPlatforms_result result = new listPlatforms_result();
      receiveBase(result, "listPlatforms");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPlatforms failed: unknown result");
    }

    public void addOperator(fdu.daslab.thrift.base.Operator operator) throws org.apache.thrift.TException
    {
      send_addOperator(operator);
      recv_addOperator();
    }

    public void send_addOperator(fdu.daslab.thrift.base.Operator operator) throws org.apache.thrift.TException
    {
      addOperator_args args = new addOperator_args();
      args.setOperator(operator);
      sendBase("addOperator", args);
    }

    public void recv_addOperator() throws org.apache.thrift.TException
    {
      addOperator_result result = new addOperator_result();
      receiveBase(result, "addOperator");
      return;
    }

    public fdu.daslab.thrift.base.Operator findOperatorInfo(java.lang.String operatorName, java.lang.String platformName) throws org.apache.thrift.TException
    {
      send_findOperatorInfo(operatorName, platformName);
      return recv_findOperatorInfo();
    }

    public void send_findOperatorInfo(java.lang.String operatorName, java.lang.String platformName) throws org.apache.thrift.TException
    {
      findOperatorInfo_args args = new findOperatorInfo_args();
      args.setOperatorName(operatorName);
      args.setPlatformName(platformName);
      sendBase("findOperatorInfo", args);
    }

    public fdu.daslab.thrift.base.Operator recv_findOperatorInfo() throws org.apache.thrift.TException
    {
      findOperatorInfo_result result = new findOperatorInfo_result();
      receiveBase(result, "findOperatorInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOperatorInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addPlatform(fdu.daslab.thrift.base.Platform platform, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPlatform_call method_call = new addPlatform_call(platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPlatform_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private fdu.daslab.thrift.base.Platform platform;
      public addPlatform_call(fdu.daslab.thrift.base.Platform platform, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPlatform", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPlatform_args args = new addPlatform_args();
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void findPlatformInfo(java.lang.String platformName, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Platform> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPlatformInfo_call method_call = new findPlatformInfo_call(platformName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPlatformInfo_call extends org.apache.thrift.async.TAsyncMethodCall<fdu.daslab.thrift.base.Platform> {
      private java.lang.String platformName;
      public findPlatformInfo_call(java.lang.String platformName, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Platform> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformName = platformName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPlatformInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPlatformInfo_args args = new findPlatformInfo_args();
        args.setPlatformName(platformName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public fdu.daslab.thrift.base.Platform getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPlatformInfo();
      }
    }

    public void listPlatforms(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listPlatforms_call method_call = new listPlatforms_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPlatforms_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform>> {
      public listPlatforms_call(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPlatforms", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPlatforms_args args = new listPlatforms_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPlatforms();
      }
    }

    public void addOperator(fdu.daslab.thrift.base.Operator operator, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOperator_call method_call = new addOperator_call(operator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOperator_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private fdu.daslab.thrift.base.Operator operator;
      public addOperator_call(fdu.daslab.thrift.base.Operator operator, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.operator = operator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOperator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOperator_args args = new addOperator_args();
        args.setOperator(operator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void findOperatorInfo(java.lang.String operatorName, java.lang.String platformName, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Operator> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOperatorInfo_call method_call = new findOperatorInfo_call(operatorName, platformName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOperatorInfo_call extends org.apache.thrift.async.TAsyncMethodCall<fdu.daslab.thrift.base.Operator> {
      private java.lang.String operatorName;
      private java.lang.String platformName;
      public findOperatorInfo_call(java.lang.String operatorName, java.lang.String platformName, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Operator> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.operatorName = operatorName;
        this.platformName = platformName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOperatorInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOperatorInfo_args args = new findOperatorInfo_args();
        args.setOperatorName(operatorName);
        args.setPlatformName(platformName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public fdu.daslab.thrift.base.Operator getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOperatorInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addPlatform", new addPlatform());
      processMap.put("findPlatformInfo", new findPlatformInfo());
      processMap.put("listPlatforms", new listPlatforms());
      processMap.put("addOperator", new addOperator());
      processMap.put("findOperatorInfo", new findOperatorInfo());
      return processMap;
    }

    public static class addPlatform<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPlatform_args> {
      public addPlatform() {
        super("addPlatform");
      }

      public addPlatform_args getEmptyArgsInstance() {
        return new addPlatform_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public addPlatform_result getResult(I iface, addPlatform_args args) throws org.apache.thrift.TException {
        addPlatform_result result = new addPlatform_result();
        iface.addPlatform(args.platform);
        return result;
      }
    }

    public static class findPlatformInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPlatformInfo_args> {
      public findPlatformInfo() {
        super("findPlatformInfo");
      }

      public findPlatformInfo_args getEmptyArgsInstance() {
        return new findPlatformInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public findPlatformInfo_result getResult(I iface, findPlatformInfo_args args) throws org.apache.thrift.TException {
        findPlatformInfo_result result = new findPlatformInfo_result();
        result.success = iface.findPlatformInfo(args.platformName);
        return result;
      }
    }

    public static class listPlatforms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPlatforms_args> {
      public listPlatforms() {
        super("listPlatforms");
      }

      public listPlatforms_args getEmptyArgsInstance() {
        return new listPlatforms_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public listPlatforms_result getResult(I iface, listPlatforms_args args) throws org.apache.thrift.TException {
        listPlatforms_result result = new listPlatforms_result();
        result.success = iface.listPlatforms();
        return result;
      }
    }

    public static class addOperator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOperator_args> {
      public addOperator() {
        super("addOperator");
      }

      public addOperator_args getEmptyArgsInstance() {
        return new addOperator_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public addOperator_result getResult(I iface, addOperator_args args) throws org.apache.thrift.TException {
        addOperator_result result = new addOperator_result();
        iface.addOperator(args.operator);
        return result;
      }
    }

    public static class findOperatorInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOperatorInfo_args> {
      public findOperatorInfo() {
        super("findOperatorInfo");
      }

      public findOperatorInfo_args getEmptyArgsInstance() {
        return new findOperatorInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public findOperatorInfo_result getResult(I iface, findOperatorInfo_args args) throws org.apache.thrift.TException {
        findOperatorInfo_result result = new findOperatorInfo_result();
        result.success = iface.findOperatorInfo(args.operatorName, args.platformName);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addPlatform", new addPlatform());
      processMap.put("findPlatformInfo", new findPlatformInfo());
      processMap.put("listPlatforms", new listPlatforms());
      processMap.put("addOperator", new addOperator());
      processMap.put("findOperatorInfo", new findOperatorInfo());
      return processMap;
    }

    public static class addPlatform<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPlatform_args, Void> {
      public addPlatform() {
        super("addPlatform");
      }

      public addPlatform_args getEmptyArgsInstance() {
        return new addPlatform_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addPlatform_result result = new addPlatform_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addPlatform_result result = new addPlatform_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addPlatform_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addPlatform(args.platform,resultHandler);
      }
    }

    public static class findPlatformInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPlatformInfo_args, fdu.daslab.thrift.base.Platform> {
      public findPlatformInfo() {
        super("findPlatformInfo");
      }

      public findPlatformInfo_args getEmptyArgsInstance() {
        return new findPlatformInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Platform> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Platform>() { 
          public void onComplete(fdu.daslab.thrift.base.Platform o) {
            findPlatformInfo_result result = new findPlatformInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findPlatformInfo_result result = new findPlatformInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPlatformInfo_args args, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Platform> resultHandler) throws org.apache.thrift.TException {
        iface.findPlatformInfo(args.platformName,resultHandler);
      }
    }

    public static class listPlatforms<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listPlatforms_args, java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform>> {
      public listPlatforms() {
        super("listPlatforms");
      }

      public listPlatforms_args getEmptyArgsInstance() {
        return new listPlatforms_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform>>() { 
          public void onComplete(java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> o) {
            listPlatforms_result result = new listPlatforms_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listPlatforms_result result = new listPlatforms_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listPlatforms_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform>> resultHandler) throws org.apache.thrift.TException {
        iface.listPlatforms(resultHandler);
      }
    }

    public static class addOperator<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOperator_args, Void> {
      public addOperator() {
        super("addOperator");
      }

      public addOperator_args getEmptyArgsInstance() {
        return new addOperator_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addOperator_result result = new addOperator_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addOperator_result result = new addOperator_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOperator_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addOperator(args.operator,resultHandler);
      }
    }

    public static class findOperatorInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findOperatorInfo_args, fdu.daslab.thrift.base.Operator> {
      public findOperatorInfo() {
        super("findOperatorInfo");
      }

      public findOperatorInfo_args getEmptyArgsInstance() {
        return new findOperatorInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Operator> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Operator>() { 
          public void onComplete(fdu.daslab.thrift.base.Operator o) {
            findOperatorInfo_result result = new findOperatorInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findOperatorInfo_result result = new findOperatorInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findOperatorInfo_args args, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Operator> resultHandler) throws org.apache.thrift.TException {
        iface.findOperatorInfo(args.operatorName, args.platformName,resultHandler);
      }
    }

  }

  public static class addPlatform_args implements org.apache.thrift.TBase<addPlatform_args, addPlatform_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPlatform_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPlatform_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addPlatform_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addPlatform_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Platform platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM((short)1, "platform");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, fdu.daslab.thrift.base.Platform.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPlatform_args.class, metaDataMap);
    }

    public addPlatform_args() {
    }

    public addPlatform_args(
      fdu.daslab.thrift.base.Platform platform)
    {
      this();
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPlatform_args(addPlatform_args other) {
      if (other.isSetPlatform()) {
        this.platform = new fdu.daslab.thrift.base.Platform(other.platform);
      }
    }

    public addPlatform_args deepCopy() {
      return new addPlatform_args(this);
    }

    @Override
    public void clear() {
      this.platform = null;
    }

    @org.apache.thrift.annotation.Nullable
    public fdu.daslab.thrift.base.Platform getPlatform() {
      return this.platform;
    }

    public addPlatform_args setPlatform(@org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Platform platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((fdu.daslab.thrift.base.Platform)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM:
        return getPlatform();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM:
        return isSetPlatform();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addPlatform_args)
        return this.equals((addPlatform_args)that);
      return false;
    }

    public boolean equals(addPlatform_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPlatform()) ? 131071 : 524287);
      if (isSetPlatform())
        hashCode = hashCode * 8191 + platform.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addPlatform_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addPlatform_args(");
      boolean first = true;

      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platform != null) {
        platform.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPlatform_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addPlatform_argsStandardScheme getScheme() {
        return new addPlatform_argsStandardScheme();
      }
    }

    private static class addPlatform_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addPlatform_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPlatform_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platform = new fdu.daslab.thrift.base.Platform();
                struct.platform.read(iprot);
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPlatform_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          struct.platform.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPlatform_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addPlatform_argsTupleScheme getScheme() {
        return new addPlatform_argsTupleScheme();
      }
    }

    private static class addPlatform_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addPlatform_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPlatform_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPlatform()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPlatform()) {
          struct.platform.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPlatform_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.platform = new fdu.daslab.thrift.base.Platform();
          struct.platform.read(iprot);
          struct.setPlatformIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addPlatform_result implements org.apache.thrift.TBase<addPlatform_result, addPlatform_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPlatform_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPlatform_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addPlatform_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addPlatform_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPlatform_result.class, metaDataMap);
    }

    public addPlatform_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPlatform_result(addPlatform_result other) {
    }

    public addPlatform_result deepCopy() {
      return new addPlatform_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addPlatform_result)
        return this.equals((addPlatform_result)that);
      return false;
    }

    public boolean equals(addPlatform_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addPlatform_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addPlatform_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPlatform_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addPlatform_resultStandardScheme getScheme() {
        return new addPlatform_resultStandardScheme();
      }
    }

    private static class addPlatform_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addPlatform_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPlatform_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPlatform_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPlatform_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addPlatform_resultTupleScheme getScheme() {
        return new addPlatform_resultTupleScheme();
      }
    }

    private static class addPlatform_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addPlatform_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPlatform_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPlatform_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findPlatformInfo_args implements org.apache.thrift.TBase<findPlatformInfo_args, findPlatformInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPlatformInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPlatformInfo_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("platformName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findPlatformInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findPlatformInfo_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String platformName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_NAME((short)1, "platformName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_NAME
            return PLATFORM_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_NAME, new org.apache.thrift.meta_data.FieldMetaData("platformName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPlatformInfo_args.class, metaDataMap);
    }

    public findPlatformInfo_args() {
    }

    public findPlatformInfo_args(
      java.lang.String platformName)
    {
      this();
      this.platformName = platformName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPlatformInfo_args(findPlatformInfo_args other) {
      if (other.isSetPlatformName()) {
        this.platformName = other.platformName;
      }
    }

    public findPlatformInfo_args deepCopy() {
      return new findPlatformInfo_args(this);
    }

    @Override
    public void clear() {
      this.platformName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPlatformName() {
      return this.platformName;
    }

    public findPlatformInfo_args setPlatformName(@org.apache.thrift.annotation.Nullable java.lang.String platformName) {
      this.platformName = platformName;
      return this;
    }

    public void unsetPlatformName() {
      this.platformName = null;
    }

    /** Returns true if field platformName is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformName() {
      return this.platformName != null;
    }

    public void setPlatformNameIsSet(boolean value) {
      if (!value) {
        this.platformName = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case PLATFORM_NAME:
        if (value == null) {
          unsetPlatformName();
        } else {
          setPlatformName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_NAME:
        return getPlatformName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_NAME:
        return isSetPlatformName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findPlatformInfo_args)
        return this.equals((findPlatformInfo_args)that);
      return false;
    }

    public boolean equals(findPlatformInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_platformName = true && this.isSetPlatformName();
      boolean that_present_platformName = true && that.isSetPlatformName();
      if (this_present_platformName || that_present_platformName) {
        if (!(this_present_platformName && that_present_platformName))
          return false;
        if (!this.platformName.equals(that.platformName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPlatformName()) ? 131071 : 524287);
      if (isSetPlatformName())
        hashCode = hashCode * 8191 + platformName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findPlatformInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPlatformName()).compareTo(other.isSetPlatformName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformName, other.platformName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findPlatformInfo_args(");
      boolean first = true;

      sb.append("platformName:");
      if (this.platformName == null) {
        sb.append("null");
      } else {
        sb.append(this.platformName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPlatformInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPlatformInfo_argsStandardScheme getScheme() {
        return new findPlatformInfo_argsStandardScheme();
      }
    }

    private static class findPlatformInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findPlatformInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPlatformInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platformName = iprot.readString();
                struct.setPlatformNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPlatformInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformName != null) {
          oprot.writeFieldBegin(PLATFORM_NAME_FIELD_DESC);
          oprot.writeString(struct.platformName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPlatformInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPlatformInfo_argsTupleScheme getScheme() {
        return new findPlatformInfo_argsTupleScheme();
      }
    }

    private static class findPlatformInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findPlatformInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPlatformInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPlatformName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPlatformName()) {
          oprot.writeString(struct.platformName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPlatformInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.platformName = iprot.readString();
          struct.setPlatformNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findPlatformInfo_result implements org.apache.thrift.TBase<findPlatformInfo_result, findPlatformInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPlatformInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPlatformInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findPlatformInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findPlatformInfo_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Platform success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, fdu.daslab.thrift.base.Platform.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPlatformInfo_result.class, metaDataMap);
    }

    public findPlatformInfo_result() {
    }

    public findPlatformInfo_result(
      fdu.daslab.thrift.base.Platform success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPlatformInfo_result(findPlatformInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new fdu.daslab.thrift.base.Platform(other.success);
      }
    }

    public findPlatformInfo_result deepCopy() {
      return new findPlatformInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public fdu.daslab.thrift.base.Platform getSuccess() {
      return this.success;
    }

    public findPlatformInfo_result setSuccess(@org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Platform success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((fdu.daslab.thrift.base.Platform)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findPlatformInfo_result)
        return this.equals((findPlatformInfo_result)that);
      return false;
    }

    public boolean equals(findPlatformInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findPlatformInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findPlatformInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPlatformInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPlatformInfo_resultStandardScheme getScheme() {
        return new findPlatformInfo_resultStandardScheme();
      }
    }

    private static class findPlatformInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findPlatformInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPlatformInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new fdu.daslab.thrift.base.Platform();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPlatformInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPlatformInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPlatformInfo_resultTupleScheme getScheme() {
        return new findPlatformInfo_resultTupleScheme();
      }
    }

    private static class findPlatformInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findPlatformInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPlatformInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPlatformInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new fdu.daslab.thrift.base.Platform();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPlatforms_args implements org.apache.thrift.TBase<listPlatforms_args, listPlatforms_args._Fields>, java.io.Serializable, Cloneable, Comparable<listPlatforms_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPlatforms_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPlatforms_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPlatforms_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPlatforms_args.class, metaDataMap);
    }

    public listPlatforms_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPlatforms_args(listPlatforms_args other) {
    }

    public listPlatforms_args deepCopy() {
      return new listPlatforms_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPlatforms_args)
        return this.equals((listPlatforms_args)that);
      return false;
    }

    public boolean equals(listPlatforms_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(listPlatforms_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPlatforms_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPlatforms_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPlatforms_argsStandardScheme getScheme() {
        return new listPlatforms_argsStandardScheme();
      }
    }

    private static class listPlatforms_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPlatforms_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPlatforms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPlatforms_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPlatforms_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPlatforms_argsTupleScheme getScheme() {
        return new listPlatforms_argsTupleScheme();
      }
    }

    private static class listPlatforms_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPlatforms_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPlatforms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPlatforms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPlatforms_result implements org.apache.thrift.TBase<listPlatforms_result, listPlatforms_result._Fields>, java.io.Serializable, Cloneable, Comparable<listPlatforms_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPlatforms_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPlatforms_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPlatforms_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, fdu.daslab.thrift.base.Platform.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPlatforms_result.class, metaDataMap);
    }

    public listPlatforms_result() {
    }

    public listPlatforms_result(
      java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPlatforms_result(listPlatforms_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> __this__success = new java.util.HashMap<java.lang.String,fdu.daslab.thrift.base.Platform>(other.success.size());
        for (java.util.Map.Entry<java.lang.String, fdu.daslab.thrift.base.Platform> other_element : other.success.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          fdu.daslab.thrift.base.Platform other_element_value = other_element.getValue();

          java.lang.String __this__success_copy_key = other_element_key;

          fdu.daslab.thrift.base.Platform __this__success_copy_value = new fdu.daslab.thrift.base.Platform(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public listPlatforms_result deepCopy() {
      return new listPlatforms_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, fdu.daslab.thrift.base.Platform val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,fdu.daslab.thrift.base.Platform>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> getSuccess() {
      return this.success;
    }

    public listPlatforms_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPlatforms_result)
        return this.equals((listPlatforms_result)that);
      return false;
    }

    public boolean equals(listPlatforms_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPlatforms_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPlatforms_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPlatforms_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPlatforms_resultStandardScheme getScheme() {
        return new listPlatforms_resultStandardScheme();
      }
    }

    private static class listPlatforms_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPlatforms_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPlatforms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,fdu.daslab.thrift.base.Platform>(2*_map0.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                  @org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Platform _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = new fdu.daslab.thrift.base.Platform();
                    _val2.read(iprot);
                    struct.success.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPlatforms_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, fdu.daslab.thrift.base.Platform> _iter4 : struct.success.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              _iter4.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPlatforms_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPlatforms_resultTupleScheme getScheme() {
        return new listPlatforms_resultTupleScheme();
      }
    }

    private static class listPlatforms_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPlatforms_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPlatforms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, fdu.daslab.thrift.base.Platform> _iter5 : struct.success.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              _iter5.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPlatforms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,fdu.daslab.thrift.base.Platform>(2*_map6.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key7;
            @org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Platform _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = new fdu.daslab.thrift.base.Platform();
              _val8.read(iprot);
              struct.success.put(_key7, _val8);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addOperator_args implements org.apache.thrift.TBase<addOperator_args, addOperator_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOperator_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOperator_args");

    private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addOperator_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addOperator_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Operator operator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPERATOR((short)1, "operator");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPERATOR
            return OPERATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, fdu.daslab.thrift.base.Operator.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOperator_args.class, metaDataMap);
    }

    public addOperator_args() {
    }

    public addOperator_args(
      fdu.daslab.thrift.base.Operator operator)
    {
      this();
      this.operator = operator;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOperator_args(addOperator_args other) {
      if (other.isSetOperator()) {
        this.operator = new fdu.daslab.thrift.base.Operator(other.operator);
      }
    }

    public addOperator_args deepCopy() {
      return new addOperator_args(this);
    }

    @Override
    public void clear() {
      this.operator = null;
    }

    @org.apache.thrift.annotation.Nullable
    public fdu.daslab.thrift.base.Operator getOperator() {
      return this.operator;
    }

    public addOperator_args setOperator(@org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Operator operator) {
      this.operator = operator;
      return this;
    }

    public void unsetOperator() {
      this.operator = null;
    }

    /** Returns true if field operator is set (has been assigned a value) and false otherwise */
    public boolean isSetOperator() {
      return this.operator != null;
    }

    public void setOperatorIsSet(boolean value) {
      if (!value) {
        this.operator = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case OPERATOR:
        if (value == null) {
          unsetOperator();
        } else {
          setOperator((fdu.daslab.thrift.base.Operator)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case OPERATOR:
        return getOperator();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case OPERATOR:
        return isSetOperator();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addOperator_args)
        return this.equals((addOperator_args)that);
      return false;
    }

    public boolean equals(addOperator_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_operator = true && this.isSetOperator();
      boolean that_present_operator = true && that.isSetOperator();
      if (this_present_operator || that_present_operator) {
        if (!(this_present_operator && that_present_operator))
          return false;
        if (!this.operator.equals(that.operator))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOperator()) ? 131071 : 524287);
      if (isSetOperator())
        hashCode = hashCode * 8191 + operator.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addOperator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOperator()).compareTo(other.isSetOperator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addOperator_args(");
      boolean first = true;

      sb.append("operator:");
      if (this.operator == null) {
        sb.append("null");
      } else {
        sb.append(this.operator);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (operator != null) {
        operator.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOperator_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addOperator_argsStandardScheme getScheme() {
        return new addOperator_argsStandardScheme();
      }
    }

    private static class addOperator_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addOperator_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOperator_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPERATOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.operator = new fdu.daslab.thrift.base.Operator();
                struct.operator.read(iprot);
                struct.setOperatorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOperator_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.operator != null) {
          oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
          struct.operator.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOperator_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addOperator_argsTupleScheme getScheme() {
        return new addOperator_argsTupleScheme();
      }
    }

    private static class addOperator_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addOperator_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOperator_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOperator()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOperator()) {
          struct.operator.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOperator_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.operator = new fdu.daslab.thrift.base.Operator();
          struct.operator.read(iprot);
          struct.setOperatorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addOperator_result implements org.apache.thrift.TBase<addOperator_result, addOperator_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOperator_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOperator_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addOperator_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addOperator_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOperator_result.class, metaDataMap);
    }

    public addOperator_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOperator_result(addOperator_result other) {
    }

    public addOperator_result deepCopy() {
      return new addOperator_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addOperator_result)
        return this.equals((addOperator_result)that);
      return false;
    }

    public boolean equals(addOperator_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addOperator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addOperator_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOperator_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addOperator_resultStandardScheme getScheme() {
        return new addOperator_resultStandardScheme();
      }
    }

    private static class addOperator_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addOperator_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOperator_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOperator_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOperator_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addOperator_resultTupleScheme getScheme() {
        return new addOperator_resultTupleScheme();
      }
    }

    private static class addOperator_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addOperator_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOperator_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOperator_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOperatorInfo_args implements org.apache.thrift.TBase<findOperatorInfo_args, findOperatorInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findOperatorInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOperatorInfo_args");

    private static final org.apache.thrift.protocol.TField OPERATOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PLATFORM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("platformName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOperatorInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOperatorInfo_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String operatorName; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String platformName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPERATOR_NAME((short)1, "operatorName"),
      PLATFORM_NAME((short)2, "platformName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPERATOR_NAME
            return OPERATOR_NAME;
          case 2: // PLATFORM_NAME
            return PLATFORM_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPERATOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("operatorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PLATFORM_NAME, new org.apache.thrift.meta_data.FieldMetaData("platformName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOperatorInfo_args.class, metaDataMap);
    }

    public findOperatorInfo_args() {
    }

    public findOperatorInfo_args(
      java.lang.String operatorName,
      java.lang.String platformName)
    {
      this();
      this.operatorName = operatorName;
      this.platformName = platformName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOperatorInfo_args(findOperatorInfo_args other) {
      if (other.isSetOperatorName()) {
        this.operatorName = other.operatorName;
      }
      if (other.isSetPlatformName()) {
        this.platformName = other.platformName;
      }
    }

    public findOperatorInfo_args deepCopy() {
      return new findOperatorInfo_args(this);
    }

    @Override
    public void clear() {
      this.operatorName = null;
      this.platformName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getOperatorName() {
      return this.operatorName;
    }

    public findOperatorInfo_args setOperatorName(@org.apache.thrift.annotation.Nullable java.lang.String operatorName) {
      this.operatorName = operatorName;
      return this;
    }

    public void unsetOperatorName() {
      this.operatorName = null;
    }

    /** Returns true if field operatorName is set (has been assigned a value) and false otherwise */
    public boolean isSetOperatorName() {
      return this.operatorName != null;
    }

    public void setOperatorNameIsSet(boolean value) {
      if (!value) {
        this.operatorName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPlatformName() {
      return this.platformName;
    }

    public findOperatorInfo_args setPlatformName(@org.apache.thrift.annotation.Nullable java.lang.String platformName) {
      this.platformName = platformName;
      return this;
    }

    public void unsetPlatformName() {
      this.platformName = null;
    }

    /** Returns true if field platformName is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformName() {
      return this.platformName != null;
    }

    public void setPlatformNameIsSet(boolean value) {
      if (!value) {
        this.platformName = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case OPERATOR_NAME:
        if (value == null) {
          unsetOperatorName();
        } else {
          setOperatorName((java.lang.String)value);
        }
        break;

      case PLATFORM_NAME:
        if (value == null) {
          unsetPlatformName();
        } else {
          setPlatformName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case OPERATOR_NAME:
        return getOperatorName();

      case PLATFORM_NAME:
        return getPlatformName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case OPERATOR_NAME:
        return isSetOperatorName();
      case PLATFORM_NAME:
        return isSetPlatformName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOperatorInfo_args)
        return this.equals((findOperatorInfo_args)that);
      return false;
    }

    public boolean equals(findOperatorInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_operatorName = true && this.isSetOperatorName();
      boolean that_present_operatorName = true && that.isSetOperatorName();
      if (this_present_operatorName || that_present_operatorName) {
        if (!(this_present_operatorName && that_present_operatorName))
          return false;
        if (!this.operatorName.equals(that.operatorName))
          return false;
      }

      boolean this_present_platformName = true && this.isSetPlatformName();
      boolean that_present_platformName = true && that.isSetPlatformName();
      if (this_present_platformName || that_present_platformName) {
        if (!(this_present_platformName && that_present_platformName))
          return false;
        if (!this.platformName.equals(that.platformName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOperatorName()) ? 131071 : 524287);
      if (isSetOperatorName())
        hashCode = hashCode * 8191 + operatorName.hashCode();

      hashCode = hashCode * 8191 + ((isSetPlatformName()) ? 131071 : 524287);
      if (isSetPlatformName())
        hashCode = hashCode * 8191 + platformName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOperatorInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOperatorName()).compareTo(other.isSetOperatorName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperatorName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorName, other.operatorName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPlatformName()).compareTo(other.isSetPlatformName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformName, other.platformName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOperatorInfo_args(");
      boolean first = true;

      sb.append("operatorName:");
      if (this.operatorName == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("platformName:");
      if (this.platformName == null) {
        sb.append("null");
      } else {
        sb.append(this.platformName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOperatorInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOperatorInfo_argsStandardScheme getScheme() {
        return new findOperatorInfo_argsStandardScheme();
      }
    }

    private static class findOperatorInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOperatorInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOperatorInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPERATOR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operatorName = iprot.readString();
                struct.setOperatorNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLATFORM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platformName = iprot.readString();
                struct.setPlatformNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOperatorInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.operatorName != null) {
          oprot.writeFieldBegin(OPERATOR_NAME_FIELD_DESC);
          oprot.writeString(struct.operatorName);
          oprot.writeFieldEnd();
        }
        if (struct.platformName != null) {
          oprot.writeFieldBegin(PLATFORM_NAME_FIELD_DESC);
          oprot.writeString(struct.platformName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOperatorInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOperatorInfo_argsTupleScheme getScheme() {
        return new findOperatorInfo_argsTupleScheme();
      }
    }

    private static class findOperatorInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOperatorInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOperatorInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOperatorName()) {
          optionals.set(0);
        }
        if (struct.isSetPlatformName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOperatorName()) {
          oprot.writeString(struct.operatorName);
        }
        if (struct.isSetPlatformName()) {
          oprot.writeString(struct.platformName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOperatorInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.operatorName = iprot.readString();
          struct.setOperatorNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.platformName = iprot.readString();
          struct.setPlatformNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOperatorInfo_result implements org.apache.thrift.TBase<findOperatorInfo_result, findOperatorInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findOperatorInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOperatorInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOperatorInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOperatorInfo_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Operator success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, fdu.daslab.thrift.base.Operator.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOperatorInfo_result.class, metaDataMap);
    }

    public findOperatorInfo_result() {
    }

    public findOperatorInfo_result(
      fdu.daslab.thrift.base.Operator success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOperatorInfo_result(findOperatorInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new fdu.daslab.thrift.base.Operator(other.success);
      }
    }

    public findOperatorInfo_result deepCopy() {
      return new findOperatorInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public fdu.daslab.thrift.base.Operator getSuccess() {
      return this.success;
    }

    public findOperatorInfo_result setSuccess(@org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Operator success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((fdu.daslab.thrift.base.Operator)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOperatorInfo_result)
        return this.equals((findOperatorInfo_result)that);
      return false;
    }

    public boolean equals(findOperatorInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOperatorInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOperatorInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOperatorInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOperatorInfo_resultStandardScheme getScheme() {
        return new findOperatorInfo_resultStandardScheme();
      }
    }

    private static class findOperatorInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOperatorInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOperatorInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new fdu.daslab.thrift.base.Operator();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOperatorInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOperatorInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOperatorInfo_resultTupleScheme getScheme() {
        return new findOperatorInfo_resultTupleScheme();
      }
    }

    private static class findOperatorInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOperatorInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOperatorInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOperatorInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new fdu.daslab.thrift.base.Operator();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
