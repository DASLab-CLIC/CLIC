/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package fdu.daslab.thrift.optimizercenter;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-05-21")
public class OptimizerPlugin {

  public interface Iface {

    public fdu.daslab.thrift.base.Plan optimize(fdu.daslab.thrift.base.Plan plan, java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> platforms) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void optimize(fdu.daslab.thrift.base.Plan plan, java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> platforms, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Plan> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public fdu.daslab.thrift.base.Plan optimize(fdu.daslab.thrift.base.Plan plan, java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> platforms) throws org.apache.thrift.TException
    {
      send_optimize(plan, platforms);
      return recv_optimize();
    }

    public void send_optimize(fdu.daslab.thrift.base.Plan plan, java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> platforms) throws org.apache.thrift.TException
    {
      optimize_args args = new optimize_args();
      args.setPlan(plan);
      args.setPlatforms(platforms);
      sendBase("optimize", args);
    }

    public fdu.daslab.thrift.base.Plan recv_optimize() throws org.apache.thrift.TException
    {
      optimize_result result = new optimize_result();
      receiveBase(result, "optimize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "optimize failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void optimize(fdu.daslab.thrift.base.Plan plan, java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> platforms, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Plan> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      optimize_call method_call = new optimize_call(plan, platforms, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class optimize_call extends org.apache.thrift.async.TAsyncMethodCall<fdu.daslab.thrift.base.Plan> {
      private fdu.daslab.thrift.base.Plan plan;
      private java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> platforms;
      public optimize_call(fdu.daslab.thrift.base.Plan plan, java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> platforms, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Plan> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.plan = plan;
        this.platforms = platforms;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("optimize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        optimize_args args = new optimize_args();
        args.setPlan(plan);
        args.setPlatforms(platforms);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public fdu.daslab.thrift.base.Plan getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_optimize();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("optimize", new optimize());
      return processMap;
    }

    public static class optimize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, optimize_args> {
      public optimize() {
        super("optimize");
      }

      public optimize_args getEmptyArgsInstance() {
        return new optimize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public optimize_result getResult(I iface, optimize_args args) throws org.apache.thrift.TException {
        optimize_result result = new optimize_result();
        result.success = iface.optimize(args.plan, args.platforms);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("optimize", new optimize());
      return processMap;
    }

    public static class optimize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, optimize_args, fdu.daslab.thrift.base.Plan> {
      public optimize() {
        super("optimize");
      }

      public optimize_args getEmptyArgsInstance() {
        return new optimize_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Plan> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Plan>() { 
          public void onComplete(fdu.daslab.thrift.base.Plan o) {
            optimize_result result = new optimize_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            optimize_result result = new optimize_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, optimize_args args, org.apache.thrift.async.AsyncMethodCallback<fdu.daslab.thrift.base.Plan> resultHandler) throws org.apache.thrift.TException {
        iface.optimize(args.plan, args.platforms,resultHandler);
      }
    }

  }

  public static class optimize_args implements org.apache.thrift.TBase<optimize_args, optimize_args._Fields>, java.io.Serializable, Cloneable, Comparable<optimize_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("optimize_args");

    private static final org.apache.thrift.protocol.TField PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("plan", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PLATFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("platforms", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new optimize_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new optimize_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Plan plan; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> platforms; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLAN((short)1, "plan"),
      PLATFORMS((short)2, "platforms");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLAN
            return PLAN;
          case 2: // PLATFORMS
            return PLATFORMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLAN, new org.apache.thrift.meta_data.FieldMetaData("plan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, fdu.daslab.thrift.base.Plan.class)));
      tmpMap.put(_Fields.PLATFORMS, new org.apache.thrift.meta_data.FieldMetaData("platforms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, fdu.daslab.thrift.base.Platform.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(optimize_args.class, metaDataMap);
    }

    public optimize_args() {
    }

    public optimize_args(
      fdu.daslab.thrift.base.Plan plan,
      java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> platforms)
    {
      this();
      this.plan = plan;
      this.platforms = platforms;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public optimize_args(optimize_args other) {
      if (other.isSetPlan()) {
        this.plan = new fdu.daslab.thrift.base.Plan(other.plan);
      }
      if (other.isSetPlatforms()) {
        java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> __this__platforms = new java.util.HashMap<java.lang.String,fdu.daslab.thrift.base.Platform>(other.platforms.size());
        for (java.util.Map.Entry<java.lang.String, fdu.daslab.thrift.base.Platform> other_element : other.platforms.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          fdu.daslab.thrift.base.Platform other_element_value = other_element.getValue();

          java.lang.String __this__platforms_copy_key = other_element_key;

          fdu.daslab.thrift.base.Platform __this__platforms_copy_value = new fdu.daslab.thrift.base.Platform(other_element_value);

          __this__platforms.put(__this__platforms_copy_key, __this__platforms_copy_value);
        }
        this.platforms = __this__platforms;
      }
    }

    public optimize_args deepCopy() {
      return new optimize_args(this);
    }

    @Override
    public void clear() {
      this.plan = null;
      this.platforms = null;
    }

    @org.apache.thrift.annotation.Nullable
    public fdu.daslab.thrift.base.Plan getPlan() {
      return this.plan;
    }

    public optimize_args setPlan(@org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Plan plan) {
      this.plan = plan;
      return this;
    }

    public void unsetPlan() {
      this.plan = null;
    }

    /** Returns true if field plan is set (has been assigned a value) and false otherwise */
    public boolean isSetPlan() {
      return this.plan != null;
    }

    public void setPlanIsSet(boolean value) {
      if (!value) {
        this.plan = null;
      }
    }

    public int getPlatformsSize() {
      return (this.platforms == null) ? 0 : this.platforms.size();
    }

    public void putToPlatforms(java.lang.String key, fdu.daslab.thrift.base.Platform val) {
      if (this.platforms == null) {
        this.platforms = new java.util.HashMap<java.lang.String,fdu.daslab.thrift.base.Platform>();
      }
      this.platforms.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> getPlatforms() {
      return this.platforms;
    }

    public optimize_args setPlatforms(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform> platforms) {
      this.platforms = platforms;
      return this;
    }

    public void unsetPlatforms() {
      this.platforms = null;
    }

    /** Returns true if field platforms is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatforms() {
      return this.platforms != null;
    }

    public void setPlatformsIsSet(boolean value) {
      if (!value) {
        this.platforms = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case PLAN:
        if (value == null) {
          unsetPlan();
        } else {
          setPlan((fdu.daslab.thrift.base.Plan)value);
        }
        break;

      case PLATFORMS:
        if (value == null) {
          unsetPlatforms();
        } else {
          setPlatforms((java.util.Map<java.lang.String,fdu.daslab.thrift.base.Platform>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PLAN:
        return getPlan();

      case PLATFORMS:
        return getPlatforms();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PLAN:
        return isSetPlan();
      case PLATFORMS:
        return isSetPlatforms();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof optimize_args)
        return this.equals((optimize_args)that);
      return false;
    }

    public boolean equals(optimize_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_plan = true && this.isSetPlan();
      boolean that_present_plan = true && that.isSetPlan();
      if (this_present_plan || that_present_plan) {
        if (!(this_present_plan && that_present_plan))
          return false;
        if (!this.plan.equals(that.plan))
          return false;
      }

      boolean this_present_platforms = true && this.isSetPlatforms();
      boolean that_present_platforms = true && that.isSetPlatforms();
      if (this_present_platforms || that_present_platforms) {
        if (!(this_present_platforms && that_present_platforms))
          return false;
        if (!this.platforms.equals(that.platforms))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPlan()) ? 131071 : 524287);
      if (isSetPlan())
        hashCode = hashCode * 8191 + plan.hashCode();

      hashCode = hashCode * 8191 + ((isSetPlatforms()) ? 131071 : 524287);
      if (isSetPlatforms())
        hashCode = hashCode * 8191 + platforms.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(optimize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPlan()).compareTo(other.isSetPlan());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlan()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan, other.plan);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPlatforms()).compareTo(other.isSetPlatforms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatforms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platforms, other.platforms);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("optimize_args(");
      boolean first = true;

      sb.append("plan:");
      if (this.plan == null) {
        sb.append("null");
      } else {
        sb.append(this.plan);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("platforms:");
      if (this.platforms == null) {
        sb.append("null");
      } else {
        sb.append(this.platforms);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (plan != null) {
        plan.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class optimize_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public optimize_argsStandardScheme getScheme() {
        return new optimize_argsStandardScheme();
      }
    }

    private static class optimize_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<optimize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, optimize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLAN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.plan = new fdu.daslab.thrift.base.Plan();
                struct.plan.read(iprot);
                struct.setPlanIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLATFORMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                  struct.platforms = new java.util.HashMap<java.lang.String,fdu.daslab.thrift.base.Platform>(2*_map18.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key19;
                  @org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Platform _val20;
                  for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                  {
                    _key19 = iprot.readString();
                    _val20 = new fdu.daslab.thrift.base.Platform();
                    _val20.read(iprot);
                    struct.platforms.put(_key19, _val20);
                  }
                  iprot.readMapEnd();
                }
                struct.setPlatformsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, optimize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.plan != null) {
          oprot.writeFieldBegin(PLAN_FIELD_DESC);
          struct.plan.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.platforms != null) {
          oprot.writeFieldBegin(PLATFORMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.platforms.size()));
            for (java.util.Map.Entry<java.lang.String, fdu.daslab.thrift.base.Platform> _iter22 : struct.platforms.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              _iter22.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class optimize_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public optimize_argsTupleScheme getScheme() {
        return new optimize_argsTupleScheme();
      }
    }

    private static class optimize_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<optimize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, optimize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPlan()) {
          optionals.set(0);
        }
        if (struct.isSetPlatforms()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlan()) {
          struct.plan.write(oprot);
        }
        if (struct.isSetPlatforms()) {
          {
            oprot.writeI32(struct.platforms.size());
            for (java.util.Map.Entry<java.lang.String, fdu.daslab.thrift.base.Platform> _iter23 : struct.platforms.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              _iter23.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, optimize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.plan = new fdu.daslab.thrift.base.Plan();
          struct.plan.read(iprot);
          struct.setPlanIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.platforms = new java.util.HashMap<java.lang.String,fdu.daslab.thrift.base.Platform>(2*_map24.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key25;
            @org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Platform _val26;
            for (int _i27 = 0; _i27 < _map24.size; ++_i27)
            {
              _key25 = iprot.readString();
              _val26 = new fdu.daslab.thrift.base.Platform();
              _val26.read(iprot);
              struct.platforms.put(_key25, _val26);
            }
          }
          struct.setPlatformsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class optimize_result implements org.apache.thrift.TBase<optimize_result, optimize_result._Fields>, java.io.Serializable, Cloneable, Comparable<optimize_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("optimize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new optimize_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new optimize_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Plan success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, fdu.daslab.thrift.base.Plan.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(optimize_result.class, metaDataMap);
    }

    public optimize_result() {
    }

    public optimize_result(
      fdu.daslab.thrift.base.Plan success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public optimize_result(optimize_result other) {
      if (other.isSetSuccess()) {
        this.success = new fdu.daslab.thrift.base.Plan(other.success);
      }
    }

    public optimize_result deepCopy() {
      return new optimize_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public fdu.daslab.thrift.base.Plan getSuccess() {
      return this.success;
    }

    public optimize_result setSuccess(@org.apache.thrift.annotation.Nullable fdu.daslab.thrift.base.Plan success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((fdu.daslab.thrift.base.Plan)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof optimize_result)
        return this.equals((optimize_result)that);
      return false;
    }

    public boolean equals(optimize_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(optimize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("optimize_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class optimize_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public optimize_resultStandardScheme getScheme() {
        return new optimize_resultStandardScheme();
      }
    }

    private static class optimize_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<optimize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, optimize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new fdu.daslab.thrift.base.Plan();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, optimize_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class optimize_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public optimize_resultTupleScheme getScheme() {
        return new optimize_resultTupleScheme();
      }
    }

    private static class optimize_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<optimize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, optimize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, optimize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new fdu.daslab.thrift.base.Plan();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
